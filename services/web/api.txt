users (7)
-----
- get all users for home (ADMIN)
- get information for user (ADMIN / SPECIFIC USER)
- delete user (ADMIN / SPECIFIC USER)
- change password (ADMIN / SPECIFIC USER) (ADMINS CAN CHANGE EACHOTHERS PASSWORD)
- promote user to admin (ADMIN)
- log user in
- register new user
- log user out
- NOTE: NO FORGOT PASSWORD, AS NO EMAIL FUNCTIONALITY IS USED

- GET '/api/user': X
-- IF ADMIN: return all users

- GET '/api/user/<user_id>': X
-- IF ADMIN: return user
-- IF USER: only return user info if authenticated as said user

- DELETE '/api/user/<user_id>' {password}
-- IF USER: must be authenticated, password used for confirmation
-- IF ADMIN: just do it.  refuse to delete admin acct if only one admin
-- return error status

- PUT '/api/user/<user_id>/password_reset', {new_password, old_password}
-- IF USER: if authenticated as said user
-- IF ADMIN: only new_password mandatory
-- return error status

- PUT '/api/user/<user_id>/admin'
-- IF ADMIN: promote user_id to admin
-- return error status

- PUT '/api/user/<user_id>/username/<username>'
-- IF USER: change username if user is auth as user_id
-- IF ADMIN: change username

devices (6)
-------
- all routes need auth (at least user)
- get device info (all or specific device)
- change device info (room, on status, etc)
- certain state changing routes (remove, add, rename) need admin

- GET '/api/devices' X
-- get all devices in home

- GET /api/device/<device_id> X
-- get specific device information

- GET /api/device/types
-- return list of all available types: (['tv', 'lights'...])

- POST /api/device/<str:dev_type>, {device info} X
-- create device of type dev_type

- DELETE /api/device/<device_id>
-- IF ADMIN: delete device

- PUT /api/device/<device_id>/<field>/<value>
-- update _field_ of _device_ to be _value
-- EX: /api/device/4/is_on/false => turn device 4 off
-- fields rated_power, device_name require ADMIN 

rooms (4)
-----
- add rooms
- remove rooms
- get all devices in a room
- rename rooms

- GET /api/room X
-- get all rooms in the form [{room_id, room_name}]

- POST /api/room, {room_name} X
-- create room, return room_id

- PUT /api/room/<room_id>/<name> X
-- change room name
-- /api/room/4?room_name='kitchen'

- GET /api/room/<room_id> X
-- get information for room in the form {room_id, room_name}

- DELETE /api/room/<room_id> X
-- delete room
